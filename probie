#!/usr/bin/env ruby
#
@VERSION = "0.7.1"
#
#TODO: track mac and manuf, add new view for mac/manuf
require 'json'
require 'net/http'
require 'optparse'

DEFAULT_CONFIG = { 
  :kismet_username     => "kismet",
  :kismet_password     => "kismet",
}


# parse all command line arguments and store in options Hash for run time
# configurations
options = {}

OptionParser.new do |opts|
  opts.on("-c", "--config-file example.json", String, "Pass a config file other than the default probie.json") do |v|
    options[:config_file] = v
  end
  opts.on("--hide-empty", "Hide probes for empty ssid") do |v|
    options[:hide_empty] = v
  end
  opts.on("--include-empty", "Include probes for empty ssid when filtering") do |v|
    options[:include_empty] = v
  end
  opts.on("--show-mac", "Show list of mac addresses") do |v|
    options[:show_mac] = v
  end
  opts.on("-s", "--ssid blah", String, "Filter and show just this ssid, exact matches only") do |v|
    options[:ssid_match] = v
  end
  opts.on("-r", "--ssid-regex blah", String, "Regex inclusive filter for just this ssid") do |v|
    options[:ssid_regex] = v
  end
  opts.on("-d", "--client-detail", "Show per client details instead of per ssid") do |v|
    options[:client_detail] = v
  end
  opts.on("-v", "--version", "Show version and quit") do |v|
    puts "#{$0}: #{@VERSION}"
    exit
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts "#{$0}: #{@VERSION}"
    puts opts
    exit
  end
end.parse!

if options[:config_file]
  @config_file = options[:config_file]
else
  @config_file = 'probie.json'
end
if options[:hide_empty]
  @hide_empty = true
else
  @hide_empty = false
end
if options[:include_empty]
  @include_empty = true
else
  @include_empty = false
end
if options[:show_mac]
  @show_mac = true
else
  @show_mac = false
end
if options[:ssid_match]
  @ssid_match = options[:ssid_match]
else
  @ssid_match = false
end
if options[:ssid_regex]
  @ssid_regex = options[:ssid_regex]
else
  @ssid_regex = false
end
if options[:client_detail]
  @client_detail = true
else
  @client_detail = false
end

def read_config
  if ! File.exists?(@config_file)
    puts("Config file #{@config_file} not found.  Writing defaults")
    File.write(@config_file, JSON.pretty_generate(DEFAULT_CONFIG))
    puts("Defaults written to #{@config_file}, please edit it and run again.")
    exit 0
  end
  begin
    @config = JSON.parse(File.read(@config_file), symbolize_names: true)
    puts("Successfully read config file #{@config_file}")
  rescue
    puts("Failed to parse #{@config_file}")
    exit 1
  end
  #this migrates old config files to include new parameters
  @config = DEFAULT_CONFIG.merge(@config)

  File.write(@config_file, JSON.pretty_generate(@config))
end

def check_kismet
  uri = URI("http://localhost:2501/system/status.json")
  request = Net::HTTP::Get.new(uri)
  request.basic_auth @config[:kismet_username], @config[:kismet_password]
  begin
    response = Net::HTTP.start(uri.hostname, uri.port) { |http| http.request(request) }
  rescue Errno::ECONNREFUSED
    puts "Please start kismet before starting probie"
    exit 1
  end
  return JSON.parse(response.body)["kismet.system.timestamp.start_sec"]
end

def call_kismet
  uri = URI("http://localhost:2501/devices/last-time/#{@last_request}/devices.json")
  request = Net::HTTP::Get.new(uri)
  request.basic_auth @config[:kismet_username], @config[:kismet_password]
  begin
    @last_request = Time.now.to_i
    response = Net::HTTP.start(uri.hostname, uri.port) { |http| http.request(request) }
    return JSON.parse(response.body)
  rescue
    puts("Failed to connect to kismet, kismet failed?")
    return false
  end
end

def update_tracker
  call_kismet.each do |device|
    next unless device["dot11.device"]
    next unless device["dot11.device"]["dot11.device.num_probed_ssids"]
    if @client_detail
      if device["dot11.device"]["dot11.device.num_probed_ssids"] > 0
        device["dot11.device"]["dot11.device.probed_ssid_map"].each do |ssid|
          @tracker[device["kismet.device.base.macaddr"]] ||= {}
          @tracker[device["kismet.device.base.macaddr"]][:manuf] ||= device["kismet.device.base.manuf"]
          @tracker[device["kismet.device.base.macaddr"]][:ssid_list] ||= []
          unless @tracker[device["kismet.device.base.macaddr"]][:ssid_list].include? ssid["dot11.probedssid.ssid"]
            @tracker[device["kismet.device.base.macaddr"]][:ssid_list] << ssid["dot11.probedssid.ssid"]
          end
          if @tracker[device["kismet.device.base.macaddr"]][:first]
            if @tracker[device["kismet.device.base.macaddr"]][:first] > ssid["dot11.probedssid.first_time"]
              @tracker[device["kismet.device.base.macaddr"]][:first] = ssid["dot11.probedssid.first_time"]
            end
          else
            @tracker[device["kismet.device.base.macaddr"]][:first] = ssid["dot11.probedssid.first_time"]
          end
          #take only most recent last_time
          if @tracker[device["kismet.device.base.macaddr"]][:last]
            if @tracker[device["kismet.device.base.macaddr"]][:last] < ssid["dot11.probedssid.last_time"]
              @tracker[device["kismet.device.base.macaddr"]][:last] = ssid["dot11.probedssid.last_time"]
            end
          else
            @tracker[device["kismet.device.base.macaddr"]][:last] = ssid["dot11.probedssid.last_time"]
          end
        end
      end
    else
      if device["dot11.device"]["dot11.device.num_probed_ssids"] > 0
        device["dot11.device"]["dot11.device.probed_ssid_map"].each do |ssid|
          @tracker[ssid["dot11.probedssid.ssid"]] ||= {}
          if @tracker[ssid["dot11.probedssid.ssid"]][:first]
            if @tracker[ssid["dot11.probedssid.ssid"]][:first] > ssid["dot11.probedssid.first_time"]
              @tracker[ssid["dot11.probedssid.ssid"]][:first] = ssid["dot11.probedssid.first_time"]
            end
          else
            @tracker[ssid["dot11.probedssid.ssid"]][:first] = ssid["dot11.probedssid.first_time"]
          end
          #take only most recent last_time
          if @tracker[ssid["dot11.probedssid.ssid"]][:last]
            if @tracker[ssid["dot11.probedssid.ssid"]][:last] < ssid["dot11.probedssid.last_time"]
              @tracker[ssid["dot11.probedssid.ssid"]][:last] = ssid["dot11.probedssid.last_time"]
            end
          else
            @tracker[ssid["dot11.probedssid.ssid"]][:last] = ssid["dot11.probedssid.last_time"]
          end
          @tracker[ssid["dot11.probedssid.ssid"]][:mac_list] ||= []
          unless @tracker[ssid["dot11.probedssid.ssid"]][:mac_list].include? device["kismet.device.base.macaddr"]
            @tracker[ssid["dot11.probedssid.ssid"]][:mac_list] << device["kismet.device.base.macaddr"]
          end
        end
      end
    end
  end
end

def end_print
  print "\e[H\e[2J"
  if @tracker.empty?
    puts "No wifi clients seen by kismet...\n"
  else
    if @client_detail
      puts "Mac Addresses,Manuf,First Seen,Last Seen,SSID List"
    else
      puts "Unique Mac Count,First Seen,Last Seen,SSID,Mac list"
    end
    @tracker.sort.each do |key, meta|
      if @client_detail
        puts "#{key},#{meta[:manuf]},#{Time.at(meta[:first])},#{Time.at(meta[:last])},#{meta[:ssid_list]}"
      else
        puts "#{meta[:mac_list].count},#{Time.at(meta[:first])},#{Time.at(meta[:last])},#{key},#{meta[:mac_list]}"
      end
    end
  end
  exit
end

def show_cui
  max_height = `tput lines`.chomp.to_i
  pbuff = ""
  lines = 1
  pbuff << "\e[H\e[2J"
  pbuff << "\e[34;1mProbie #{@VERSION}\e[0m\n"
  lines += 1
  if @tracker.empty?
    pbuff << "\nEverything appears to be working, but no wifi clients seen by kismet yet...\n"
  else
    if @client_detail
      pbuff << "Mac Addresses\t\tManuf\t\t\tFirst Seen (sec ago)\t\tLast Seen (sec ago)\tSSID List\n"
      lines +=1
    else
      pbuff << "Unique Mac Count\t\tFirst Seen (sec ago)\t\tLast Seen (sec ago)\t\tSSID\n"
      lines +=1
    end
    @tracker.sort.each do |key, meta|
      next if lines >= max_height
      if @client_detail
        if meta[:manuf].length < 8
          pbuff << "#{key}\t#{meta[:manuf][0..14]}\t\t\t#{Time.now.to_i - meta[:first]}\t\t\t\t#{Time.now.to_i - meta[:last]}\t\t\t#{meta[:ssid_list]}\n"
        else
          pbuff << "#{key}\t#{meta[:manuf][0..14]}\t\t#{Time.now.to_i - meta[:first]}\t\t\t\t#{Time.now.to_i - meta[:last]}\t\t\t#{meta[:ssid_list]}\n"
        end
        lines += 1
      else
        if @hide_empty && key.empty?
          next unless @include_empty
        end
        if @ssid_regex && key !~ /#{@ssid_regex}/i
          next unless ( key.empty? && !@include_empty )
        elsif @ssid_match && key != @ssid_match
          next unless ( key.empty? && !@include_empty )
        end
        if @show_mac
          pbuff << "#{meta[:mac_list].count}\t\t\t\t#{Time.now.to_i - meta[:first]}\t\t\t\t#{Time.now.to_i - meta[:last]}\t\t\t\t#{key}\n"
          lines += 1
          pbuff << "#{meta[:mac_list]}\n"
          lines += 1
        else
          pbuff << "#{meta[:mac_list].count}\t\t\t\t#{Time.now.to_i - meta[:first]}\t\t\t\t#{Time.now.to_i - meta[:last]}\t\t\t\t#{key}\n"
        end
        lines += 1
      end
    end
  end
  puts pbuff
end

def main_loop
  done = false
  trap('SIGINT') do
    done = true
  end

  @last_request = 0
  @tracker = {}
  puts "Waiting for a wifi client..."
  loop do
    update_tracker
    if done
      end_print
    else
      show_cui
    end
    sleep 1
  end
end

begin
  puts "Probie Version #{@VERSION}"
  read_config
  main_loop
end
